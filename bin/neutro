#!/usr/bin/env perl6
use v6;
use File::Mkdir;
use Module::Build;
use Module::Test;
use Module::Install;
use LWP::Simple;

my $home = ($*VM<config><osname> eq 'MSWin32')
            ?? %*ENV<HOMEPATH> !! %*ENV<HOME>;
my $CONFIGDIR = "$home/.neutro";
my $INSTALLDIR = "$home/.perl6";
my $SRCDIR = "$CONFIGDIR/src";
my %modules;

# check if modules list is present, update it otherwise
sub checklist {
    unless $CONFIGDIR.IO ~~ :d {
        mkdir $CONFIGDIR, :p;
    }
    unless "$CONFIGDIR/modules.list".IO ~~ :f {
        updatedb;
    }
    my $fh = open "$CONFIGDIR/modules.list";
    for $fh.lines -> $line {
        next if $line ~~ /^\#/;
        my ($name, $protoname, $url) = $line.split: ' ';
        %modules{$name}<protoname> = $protoname;
        %modules{$name}<url> = $url;
    }
    $fh.close;
}

sub crap (Str $msg) {
    notice $msg;
    exit 1;
}

sub dirname (Str $name) {
    (~$name).trans(':' => ',')
}

sub fetch (Str $name) {
    my $res;
    mkdir $SRCDIR, :p;
    chdir $SRCDIR;
    notice "Fetching $name";
    if "$SRCDIR/{dirname $name}".IO ~~ :d {
        chdir dirname $name;
        $res = run 'git pull -q';
        crap "Failed updating the $name repo" if $res;
    } else {
        $res = run "git clone -q %modules{$name}<url> {dirname $name}";
        crap "Failed cloning the $name repo" if $res;
        chdir dirname $name;
    }
}

# translate proto module name to our module name (if needed)
sub getname (Str $name) {
    return $name if %modules.exists($name);
    for %modules.kv -> $module, $data {
        if $data<protoname> eq $name {
            return $module;
        }
    }
    return;
}

sub install (Str $module, Bool $strict?, Bool $v?) {
    my $res;
    my $name = getname $module or crap "Unknown module '$module'";
    fetch $name;
    installdeps $name;
    notice "Building $name";
    my $fail = False;
    try {
        Module::Build::build :$v;
        CATCH {
            $fail = True;
        }
    }
    crap "Building $name failed" if $fail;
    # THINKABOUT: what if tests are someplace else?
    # Everyone's allowed to do it
    if $strict and 't'.IO !~~ :d {
        crap "No tests for $name";
    }
    notice "Testing $name";
    try {
        Module::Test::test :$v;
        CATCH {
            $fail = True;
        }
    }
    crap "Tests failed for $name" if $fail;
    notice "Installing $name";
    try {
        Module::Install::install :$v;
        CATCH {
            $fail = True;
        }
    }
    crap "Installing $name failed" if $fail;
    notice "Successfully installed $name";
}

sub installdeps (Str $name) {
    my $dir = cwd;
    if 'deps.proto'.IO ~~ :f {
        my $fh = open 'deps.proto';
        for $fh.lines -> $dep {
            next if $dep ~~ /^\#/;
            next if $dep eq '';
            unless isinstalled $dep {
                my $realdep = getname $dep
                    or crap "No such module: $dep ($name dependency)";
                notice "Found $realdep as a $name dependency, installing";
                install $dep;
                notice "$realdep installed, now back into $name";
            }
        }
        $fh.close;
    }
    chdir $dir;
}

sub isinstalled (Str $module) {
    eval "use {getname($module)}";
    return $! ?? False !! True;
}

sub listmodules {
    for %modules.keys.sort.grep({ $_ }) { .say }
}

sub notice (Str $what) {
    say "==> $what";
}

sub updatedb {
    notice 'Updating modules database';
    chdir $CONFIGDIR;
    unlink 'modules.list' if 'modules.list'.IO ~~ :e;
    LWP::Simple.new.getstore:
        'http://github.com/tadzik/neutro/raw/master/modules.list',
        'modules.list';
}

sub MAIN ($command, $param?, Bool :$strict, Bool :$v) {
    checklist;
    given $command {
        when 'i' {
            unless $param.defined {
                crap "i requires a parameter -- a module name";
            }
            install $param, $strict, $v;
        }
        when 'l' {
            listmodules;
        }
        when 'u' {
            updatedb;
        }
        default {
            USAGE;
        }
    }
}

sub USAGE {
    say "Usage: neutro <command> [parameter]";
    say "Available commands (with example usage):
    neutro i Acme::Meow 
        install Acme::Meow

    neutro i Acme::Meow --strict
        same as above, but terminate the process if no tests are found

    neutro l
        list available modules

    neutro u
        update the modules database
";
}

# vim: ft=perl6
