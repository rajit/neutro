#!/usr/bin/env perl6
use v6;
use File::Mkdir;
use File::Copy;
use Module::Build;
use Module::Test;
use Module::Install;

my $home = ($*VM<config><osname> eq 'MSWin32')
            ?? %*ENV<HOMEPATH> !! %*ENV<HOME>;
my $CONFIGDIR = "$home/.neutro";
my $INSTALLDIR = %*ENV<DESTDIR> // "$home/.perl6";
my $INSTALLED = "$CONFIGDIR/installed";
my $SRCDIR = "$CONFIGDIR/src";
my $PROJECTS_FILE = 'projects.list';
my %modules;

sub notice (Str $what) {
    say "==> $what";
}

class ModulesDatabase {
    has $!path;
    has $!projects_file;
    has $!ecosystem_source;
    has $!ecosystem_name;
    has $!src_path;

    method update {
        notice "Updating modules database";

        given "$!src_path/$!projects_file" {
            when .IO.e { unlink }
        }

        my $path = self.fetch: $!ecosystem_name, $!ecosystem_source;
        cp "$path/$!projects_file", "$!path/$!projects_file";
    }

    method fetch (Str $name, Str $url) {
        given $!src_path {
            unless .IO.d { say "mkdir $_, :p"; mkdir $_, :p }
        }

        notice "Fetching $name";

        my $full_src = "$!src_path/$name";

        given $full_src {
            when .IO.d {
                my $cwd = cwd;
                chdir $_;
                run 'git pull -q' and die "Couldn't pull latest $name";
                chdir $cwd;
            }
            default { run "git clone -q $url $_" and die "Couldn't clone $name" }
        }

        return $full_src;

        CATCH {
            say $!;
            exit 1;
        }
    }
}

# check if modules list is present, update it otherwise
sub checklist {
    unless $CONFIGDIR.IO ~~ :d {
        mkdir $CONFIGDIR, :p;
    }
    unless "$CONFIGDIR/projects.list".IO ~~ :f {
        updatedb;
    }
    unless $INSTALLED.IO ~~ :f {
        open($INSTALLED, :w).close;
    }
    my $fh = open "$CONFIGDIR/projects.list";
    for $fh.lines -> $line {
        next if $line ~~ /^\#/;
        my ($name, $url) = $line.split: ' ';
        %modules{$name} = $url;
    }
    $fh.close;
}

sub crap (Str $msg) {
    notice $msg;
    exit 1;
}

sub fetch (Str $name, Str $url) {
    my $res;
    mkdir $SRCDIR, :p;
    chdir $SRCDIR;
    notice "Fetching $name";
    if "$SRCDIR/$name".IO ~~ :d {
        chdir $name;
        $res = run 'git pull -q';
        crap "Failed updating the $name repo" if $res;
    } else {
        $res = run "git clone -q $url $name";
        crap "Failed cloning the $name repo" if $res;
        chdir $name;
    }
}

sub install (Str $module, Bool $strict?, Bool $v?, Bool :$fetch = True) {
    my $res;
    if $fetch {
        %modules.exists($module) or crap "Unknown module $module";
        fetch $module, %modules{$module};
    }
    installdeps $module;
    notice "Building $module";
    my $fail = False;
    try {
        Module::Build::build :$v;
        CATCH {
            $fail = True;
        }
    }
    crap "Building $module failed" if $fail;
    # THINKABOUT: what if tests are someplace else?
    # Everyone's allowed to do it
    if $strict and 't'.IO !~~ :d {
        crap "No tests for $module";
    }
    notice "Testing $module";
    try {
        Module::Test::test :$v;
        CATCH {
            $fail = True;
        }
    }
    crap "Tests failed for $module" if $fail;
    notice "Installing $module";
    try {
        Module::Install::install :$v;
        CATCH {
            $fail = True;
        }
    }
    crap "Installing $module failed" if $fail;
    notice "Successfully installed $module";

    unless isinstalled $module {
        given open($INSTALLED, :a) {
            .say($module);
            .close;
        }
    }
}

sub installdeps (Str $name) {
    my $dir = cwd;
    if 'deps.proto'.IO ~~ :f {
        my $fh = open 'deps.proto';
        for $fh.lines -> $dep {
            next if $dep ~~ /^\#/;
            next if $dep eq '';
            unless isinstalled $dep {
                notice "$name depends on $dep, installing now";
                install $dep;
            }
        }
        $fh.close;
    }
    chdir $dir;
}

sub isinstalled (Str $module) {
    my $isit;
    given open($INSTALLED) {
        $isit = .lines.first($module).Bool;
        .close;
    }
    return $isit;
}

sub listmodules {
    for %modules.keys.sort.grep({ $_ }) { .say }
}

sub updatedb {
    notice 'Updating modules database';
    my $cwd = cwd;
    chdir $CONFIGDIR;
    unlink 'projects.list' if 'projects.list'.IO ~~ :e;
    fetch 'ecosystem', 'git://github.com/perl6/ecosystem.git';
    cp 'projects.list', "$CONFIGDIR/projects.list";
    chdir $cwd;
}

my $db = ModulesDatabase.new(
    path => $CONFIGDIR,
    projects_file => $PROJECTS_FILE,
    ecosystem_source => 'git://github.com/perl6/ecosystem.git',
    ecosystem_name => 'ecosystem',
    src_path => $SRCDIR);

multi MAIN ('list') {
    checklist;
    listmodules;
}

multi MAIN ('update') {
    $db.update;
}

multi MAIN ($module, Bool :$strict, Bool :$v) {
    checklist;
    install $module, $strict, $v, :fetch($module eq '.' ?? False !! True);
}

# vim: ft=perl6
