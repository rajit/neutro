#!/usr/bin/env perl6
use v6;
use File::Mkdir;
use File::Copy;
use Module::Build;
use Module::Test;
use Module::Install;

my $home = ($*VM<config><osname> eq 'MSWin32')
            ?? %*ENV<HOMEPATH> !! %*ENV<HOME>;
my $CONFIGDIR = "$home/.neutro";
my $INSTALLDIR = %*ENV<DESTDIR> // "$home/.perl6";
my $INSTALLED = "$CONFIGDIR/installed";
my $SRCDIR = "$CONFIGDIR/src";
my $PROJECTS_FILE = 'projects.list';
my %modules;

sub notice (Str $what) {
    say "==> $what";
}

class Git {
    has $!path;
    has $!repository;
    has $!translated_repository;

    method translated_repository {
        unless $!translated_repository {
            $!translated_repository = $!repository.subst: / ^git\:\/\/ /, 'http://';
        }

        return $!translated_repository;
    }

    method pull {
        my $cwd = cwd;
        chdir $!path;
        run 'git pull -q'
            and die "Couldn't pull latest $!path";
        chdir $cwd;
    }

    method clone {
        run "git clone -q { self.translated_repository } $!path"
            and die "Couldn't clone { self.translated_repository } to $!path"
    }

    method update(Str $url, Str $path) {
        my $git = Git.new(path => $path, repository => $url);

        given $path {
            when .IO.d { $git.pull }
            default { $git.clone }
        }
    }
}

class ModulesDatabase {
    has $!path;
    has $!projects_file;
    has $!ecosystem_source;
    has $!ecosystem_name;
    has $!src_path;
    has $!install_file;
    has %!modules;

    method update {
        notice "Updating modules database";

        given "$!src_path/$!projects_file" {
            when .IO.e { unlink }
        }

        my $path = self.fetch: $!ecosystem_name, $!ecosystem_source;
        cp "$path/$!projects_file", "$!path/$!projects_file";
    }

    multi method fetch (Str $module) {
        crap "Unknown module $module"
            unless %!modules.exists: $module;
        self.fetch: $module, %!modules{$module};
    }

    multi method fetch (Str $name, Str $url) {
        given $!src_path {
            unless .IO.d { mkdir $_, :p }
        }

        notice "Fetching $name";

        my $full_src = "$!src_path/$name";

        Git.update($url, $full_src);

        return $full_src;

        CATCH {
            say $!;
            exit 1;
        }
    }

    method list {
        self.read;
        .say for %!modules.keys.sort.grep: { $_ };
    }

    method read {
        return if %!modules;

        given "$!path/$!projects_file" {
            unless .IO.f { self.update }

            given open($_) {
                for .lines -> $line {
                    next if $line ~~ /^\#/;

                    %!modules.push: $line.split: ' ';
                }
                .close;
            }
        }
    }

    method install(Str $module, Bool $strict?, Bool $v?, Bool :$fetch = True) {
        self.read;

        self.fetch: $module
            if $fetch;

        self.install_deps: $module;

        notice "Building $module";
        self.build: $module, :$v;

        notice "Testing $module";
        self.test: $module, :$strict, :$v;

        notice "Installing $module";
        self._install: $module, :$v;
    }

    method install_deps (Str $module) {
        given "$!src_path/$module/deps.proto" {
            if .IO.f {
                my $fh = open $_;
                for $fh.lines -> $dep {
                    next if $dep ~~ /^\#/;
                    next if $dep eq '';

                    unless self.is_installed: $module {
                        notice "$module depends on $dep, installing now";
                        self.install: $dep;
                    }
                }
                $fh.close;
            }
        }
    }

    method build (Str $module, Bool :$v) {
        self.run_or:
            { Module::Build::build :$v },
            $module, "Build $module failed";
    }

    method test (Str $module, Bool :$strict, Bool :$v) {
        crap "No tests for $module"
            if $strict and "$!src_path/$module/t".IO.d;
        self.run_or:
            { Module::Test::test :$v },
            $module, "Tests failed for $module";
    }

    method run_or (Callable $to_run, Str $module, Str $error_message) {
        my $cwd = cwd;
        chdir "$!src_path/$module";
        try {
            $to_run();
            CATCH { crap $error_message }
        }
        chdir $cwd;
    }

    method _install (Str $module, Bool :$v) {
        self.run_or:
            { Module::Install::install :$v },
            $module, "Installing $module failed";

        notice "Successfully installed $module";
        unless self.is_installed($module) {
            given open($!install_file, :a) {
                .say: $module;
                .close;
            }
        }
    }

    method is_installed (Str $module) {
        my $isit;
        given open($INSTALLED) {
            $isit = .lines.first($module).Bool;
            .close;
        }
        return $isit;
    }
}

my $db = ModulesDatabase.new(
    path => $CONFIGDIR,
    projects_file => $PROJECTS_FILE,
    ecosystem_source => 'http://github.com/perl6/ecosystem.git',
    ecosystem_name => 'ecosystem',
    install_file => $INSTALLED,
    src_path => $SRCDIR);

sub crap (Str $msg) {
    notice $msg;
    exit 1;
}

multi MAIN ('list') {
    $db.list;
}

multi MAIN ('update') {
    $db.update;
}

multi MAIN ($module, Bool :$strict, Bool :$v) {
    $db.install: $module, $strict, $v, :fetch($module eq '.' ?? False !! True);
}

# vim: ft=perl6
